def notifyBuild(String buildStatus, Exception e){
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = """*${buildStatus}*: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nMore detail in console output at <${env.BUILD_URL}|${env.BUILD_URL}>"""
  def details = """${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\n
    Check console output at ${env.BUILD_URL} """

  // Override default values based on build status
  if (buildStatus == 'STARTED'){
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL'){
    color = 'GREEN'
    colorCode = '#00FF00'
  } else{
    color = 'RED'
    colorCode = '#FF0000'
    details +="<p>Error message ${e.message}, stacktrace: ${e}</p>"
    summary +="\nError message ${e.message}, stacktrace: ${e}"
  }

  // Send notifications
  emailext(
    subject: subject,
    body: details,
    attachLog: true,
    recipientProviders: [[$class: 'DevelopersRecipientProvider']],
    to: "tom.parker@osi.ca.gov"
  )
}

node ('tpt4-slave'){
  def serverArti = Artifactory.server 'CWDS_DEV'
  def rtGradle = Artifactory.newGradleBuild()
  properties(
    [ buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')),
      disableConcurrentBuilds(),
      [$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false]
    ]
  )
  try {
    stage('Preparation'){
	  rtGradle.tool = "Gradle_35"
	  rtGradle.resolver repo:'repo', server: serverArti
	  rtGradle.useWrapper = false
	  checkout scm
    }
    stage('Build'){
	    def buildInfo = rtGradle.run buildFile: 'build.gradle', tasks: 'jar -D build=${BUILD_NUMBER}'
    }
    stage('Tests'){
      buildInfo = rtGradle.run buildFile: 'build.gradle', tasks: 'test jacocoTestReport', switches: '--stacktrace -D build=${BUILD_NUMBER}'
      publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'build/reports/tests/test', reportFiles: 'index.html', reportName: 'JUnit Report', reportTitles: 'JUnit tests summary'])
    }
    stage('Integration Tests'){
      buildInfo = rtGradle.run buildFile: 'build.gradle', tasks: 'integrationTest  jacocoTestReport', switches: '--stacktrace -D build=${BUILD_NUMBER}'
      publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'build/reports/tests/integrationTest', reportFiles: 'index.html', reportName: 'IT Report', reportTitles: 'Integration Tests summary'])
    }
    stage('JavaDoc'){
      buildInfo = rtGradle.run buildFile: 'build.gradle', tasks: 'javadoc', switches: '--stacktrace -D build=${BUILD_NUMBER}'
    }
    
    stage('JMeter Tests'){
      bzt generatePerformanceTrend: false, params: 'src/test/resources/jmeter/_referrals.jmx', printDebugOutput: true, useBztExitCode: false
      bzt generatePerformanceTrend: false, params: 'src/test/resources/jmeter/_reporters.jmx', printDebugOutput: true, useBztExitCode: false
      bzt generatePerformanceTrend: false, params: 'src/test/resources/jmeter/_referralClients.jmx', printDebugOutput: true, useBztExitCode: false
      bzt generatePerformanceTrend: false, params: 'src/test/resources/jmeter/_staffpersons.jmx', printDebugOutput: true, useBztExitCode: false
      bzt generatePerformanceTrend: false, params: 'src/test/resources/jmeter/_allegations.jmx', printDebugOutput: true, useBztExitCode: false
      bzt generatePerformanceTrend: false, params: 'src/test/resources/jmeter/_clients.jmx', printDebugOutput: true, useBztExitCode: false
      bzt generatePerformanceTrend: false, params: 'src/test/resources/jmeter/referrals.jmx', printDebugOutput: true, useBztExitCode: false
      bzt generatePerformanceTrend: false, params: 'src/test/resources/jmeter/CmsReferralLegacyNSComparison.jmx', printDebugOutput: true, useBztExitCode: false
    }
    stage('SonarQube analysis'){
	    withSonarQubeEnv('Core-SonarQube') {
	      buildInfo = rtGradle.run buildFile: 'build.gradle', switches: '--info -D build=${BUILD_NUMBER}', tasks: 'sonarqube -Dsonar.projectKey=api-pull-request -Dsonar.projectName=api-pull-request'
      }
    }
  } catch (Exception e){
    errorcode = e
    currentBuild.result = "FAIL"
    notifyBuild(currentBuild.result,errorcode)
    throw e;
  }finally{
    publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'build/reports/tests/test', reportFiles: 'index.html', reportName: 'JUnit Report', reportTitles: 'JUnit tests summary'])
    publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'build/reports/tests/integrationTest', reportFiles: 'index.html', reportName: 'IT Report', reportTitles: 'Integration Tests summary'])
    cleanWs()
 }
}
