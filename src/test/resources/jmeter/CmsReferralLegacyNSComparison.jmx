<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="JDBC Users" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1481058862000</longProp>
        <longProp name="ThreadGroup.end_time">1481058862000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller" enabled="true">
          <stringProp name="IncludeController.includepath">/Users/tparker/projects/API/src/test/resources/jmeter/login.jmx</stringProp>
        </IncludeController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Controller" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;referral&quot;: {&#xd;
 &quot;additionalInfoIncludedCode&quot; : false,&#xd;
 &quot;anonymousReporterIndicator&quot; : false,&#xd;
 &quot;applicationForPetitionIndicator&quot; : false,&#xd;
 &quot;approvalNumber&quot; : null,&#xd;
 &quot;approvalStatusType&quot; : 118,&#xd;
 &quot;caretakersPerpetratorCode&quot; : false,&#xd;
 &quot;closureDate&quot; : null,&#xd;
 &quot;communicationMethodType&quot; : 409,&#xd;
 &quot;countySpecificCode&quot; : &quot;36&quot;,&#xd;
 &quot;currentLocationOfChildren&quot; : &quot;7h6hSuC0X5&quot;,&#xd;
 &quot;drmsAllegationDescriptionDoc&quot; : &quot;AajeIli0Dv&quot;,&#xd;
 &quot;drmsErReferralDoc&quot; : &quot;Aaxp90g0Mc&quot;,&#xd;
 &quot;drmsInvestigationDoc&quot; : &quot;AbpSqpC0Ki&quot;,&#xd;
 &quot;filedSuspectedChildAbuseReporttoLawEnforcementIndicator&quot; : false,&#xd;
 &quot;familyAwarenessIndicator&quot; : false,&#xd;
 &quot;govtEntityType&quot; : 1087,&#xd;
 &quot;legalDefinitionCode&quot; : &quot; &quot;,&#xd;
 &quot;legalRightsNoticeIndicator&quot; : false,&#xd;
 &quot;limitedAccessCode&quot; : &quot;N&quot;,&#xd;
 &quot;mandatedCrossReportReceivedDate&quot; : &quot;2016-11-14&quot;,&#xd;
 &quot;referralName&quot; : &quot;Standard Referral                  &quot;,&#xd;
 &quot;openAdequateCaseCode&quot; : &quot; &quot;,&#xd;
 &quot;receivedDate&quot; : &quot;2016-11-14&quot;,&#xd;
 &quot;receivedTime&quot; : &quot;13:19:00&quot;,&#xd;
 &quot;referralResponseType&quot; : 0,&#xd;
 &quot;referredToResourceType&quot; : 0,&#xd;
 &quot;responseDeterminationDate&quot; : null,&#xd;
 &quot;responseDeterminationTime&quot; : null,&#xd;
 &quot;responseRationaleText&quot; : null,&#xd;
 &quot;screenerNoteText&quot; : &quot;7zrMRgS0X5&quot;,&#xd;
 &quot;specificsIncludedCode&quot; : &quot; &quot;,&#xd;
 &quot;sufficientInformationCode&quot; : &quot; &quot;,&#xd;
 &quot;unfoundedSeriesCode&quot; : &quot; &quot;,&#xd;
 &quot;linkToPrimaryReferralId&quot; : null,&#xd;
 &quot;allegesAbuseOccurredAtAddressId&quot; : &quot;AaNli340MV&quot;,&#xd;
 &quot;firstResponseDeterminedByStaffPersonId&quot; : &quot;0X5&quot;,&#xd;
 &quot;primaryContactStaffPersonId&quot; : &quot;0X5&quot;,&#xd;
 &quot;specialProjectReferralIndicator&quot; : false,&#xd;
 &quot;zippyCreatedIndicator&quot; : false,&#xd;
 &quot;homelessIndicator&quot; : false,&#xd;
 &quot;familyRefusedServicesIndicator&quot; : false,&#xd;
 &quot;firstEvaluatedOutApprovalDate&quot; : null,&#xd;
 &quot;responsibleAgencyCode&quot; : &quot;C&quot;,&#xd;
 &quot;limitedAccessGovtAgencyType&quot; : null,&#xd;
 &quot;limitedAccessDate&quot; : null,&#xd;
 &quot;limitedAccessDesc&quot; : null,&#xd;
 &quot;originalClosureDate&quot; : null&#xd;
},&#xd;
  &quot;allegation&quot;: [&#xd;
    {&#xd;
 &quot;abuseEndDate&quot; : null,&#xd;
 &quot;abuseFrequency&quot; : 1234,&#xd;
 &quot;abuseFrequencyPeriodCode&quot; : &quot;D&quot;,&#xd;
 &quot;abuseLocationDescription&quot; : &quot;                                                                           &quot;,&#xd;
 &quot;abuseStartDate&quot; : null,&#xd;
 &quot;allegationDispositionType&quot; : 5918,&#xd;
 &quot;allegationType&quot; : 2178,&#xd;
 &quot;dispositionDescription&quot; : &quot;                                                                                                                                                                                                                                                              &quot;,&#xd;
 &quot;dispositionDate&quot; : null,&#xd;
 &quot;injuryHarmDetailIndicator&quot; : false,&#xd;
 &quot;nonProtectingParentCode&quot; : &quot;U&quot;,&#xd;
 &quot;staffPersonAddedIndicator&quot; : false,&#xd;
 &quot;victimClientId&quot; : &quot;Ov6RE3Q0X5&quot;,&#xd;
 &quot;perpetratorClientId&quot; : null,&#xd;
 &quot;referralId&quot; : &quot;5Y3vKVs0X5&quot;,&#xd;
 &quot;countySpecificCode&quot; : &quot;36&quot;,&#xd;
 &quot;zippyCreatedIndicator&quot; : false,&#xd;
 &quot;placementFacilityType&quot; : 1417&#xd;
}&#xd;
  ],&#xd;
  &quot;crossReport&quot;: [&#xd;
    {&#xd;
 &quot;thirdId&quot; : &quot;LbZSuBw0X5&quot;,&#xd;
 &quot;crossReportMethodType&quot; : 2097,&#xd;
 &quot;filedOutOfStateIndicator&quot; : false,&#xd;
 &quot;governmentOrgCrossRptIndicatorVar&quot; : false,&#xd;
 &quot;informTime&quot; : &quot;09:00:00&quot;,&#xd;
 &quot;recipientBadgeNumber&quot; : &quot;      &quot;,&#xd;
 &quot;recipientPhoneExtensionNumber&quot; : 1234,&#xd;
 &quot;recipientPhoneNumber&quot; : 1234567890,&#xd;
 &quot;informDate&quot; : &quot;2016-11-14&quot;,&#xd;
 &quot;recipientPositionTitleDesc&quot; : &quot;standard referral cross report&quot;,&#xd;
 &quot;referenceNumber&quot; : &quot;          &quot;,&#xd;
 &quot;referralId&quot; : &quot;5Y3vKVs0X5&quot;,&#xd;
 &quot;lawEnforcementId&quot; : null,&#xd;
 &quot;staffPersonId&quot; : &quot;0X5&quot;,&#xd;
 &quot;description&quot; : &quot;                                                                                                                        &quot;,&#xd;
 &quot;recipientName&quot; : &quot;longarm law                             &quot;,&#xd;
 &quot;outStateLawEnforcementAddr&quot; : &quot;                                                                                                                                                                                                                                                              &quot;,&#xd;
 &quot;countySpecificCode&quot; : &quot;36&quot;,&#xd;
 &quot;lawEnforcementIndicator&quot; : false,&#xd;
 &quot;outStateLawEnforcementIndicator&quot; : false,&#xd;
 &quot;satisfyCrossReportIndicator&quot; : false&#xd;
}&#xd;
  ],&#xd;
  &quot;referralClient&quot;: [&#xd;
    {&#xd;
 &quot;approvalNumber&quot; : null,&#xd;
 &quot;approvalStatusType&quot; : 118,&#xd;
 &quot;dispositionClosureReasonType&quot; : 0,&#xd;
 &quot;dispositionCode&quot; : &quot;A&quot;,&#xd;
 &quot;dispositionDate&quot; : null,&#xd;
 &quot;selfReportedIndicator&quot; : false,&#xd;
 &quot;staffPersonAddedIndicator&quot; : false,&#xd;
 &quot;referralId&quot; : &quot;5Y3vKVs0X5&quot;,&#xd;
 &quot;clientId&quot; : &quot;0mOgbJM0X5&quot;,&#xd;
 &quot;dispositionClosureDescription&quot; : &quot;                                                                                                                                                                                                                            &quot;,&#xd;
 &quot;ageNumber&quot; : 39,&#xd;
 &quot;agePeriodCode&quot; : &quot;Y&quot;,&#xd;
 &quot;countySpecificCode&quot; : &quot;36&quot;,&#xd;
 &quot;mentalHealthIssuesIndicator&quot; : null,&#xd;
 &quot;alcoholIndicator&quot; : null,&#xd;
 &quot;drugIndicator&quot; : null&#xd;
}&#xd;
  ],&#xd;
  &quot;reporter&quot;: {&#xd;
 &quot;referralId&quot; : &quot;5Y3vKVs0X5&quot;,&#xd;
 &quot;badgeNumber&quot; : &quot; &quot;,&#xd;
 &quot;cityName&quot; : &quot;Freson&quot;,&#xd;
 &quot;colltrClientRptrReltnshpType&quot; : 0,&#xd;
 &quot;communicationMethodType&quot; : 0,&#xd;
 &quot;confidentialWaiverIndicator&quot; : false,&#xd;
 &quot;drmsMandatedRprtrFeedback&quot; : null,&#xd;
 &quot;employerName&quot; : &quot;&quot;,&#xd;
 &quot;feedbackDate&quot; : &quot;2016-10-31&quot;,&#xd;
 &quot;feedbackRequiredIndicator&quot; : true,&#xd;
 &quot;firstName&quot; : &quot;Joe&quot;,&#xd;
 &quot;lastName&quot; : &quot;Report&quot;,&#xd;
 &quot;mandatedReporterIndicator&quot; : true,&#xd;
 &quot;messagePhoneExtensionNumber&quot; : 321,&#xd;
 &quot;messagePhoneNumber&quot; : 9876543,&#xd;
 &quot;middleInitialName&quot; : &quot;R&quot;,&#xd;
 &quot;namePrefixDescription&quot; : &quot; &quot;,&#xd;
 &quot;primaryPhoneNumber&quot; : 9876543,&#xd;
 &quot;primaryPhoneExtensionNumber&quot; : 678,&#xd;
 &quot;stateCodeType&quot; : 0,&#xd;
 &quot;streetName&quot; : &quot;Sixth Street&quot;,&#xd;
 &quot;streetNumber&quot; : &quot;9876&quot;,&#xd;
 &quot;suffixTitleDescription&quot; : &quot;Sir&quot;,&#xd;
 &quot;zipcode&quot; : &quot;99887&quot;,&#xd;
 &quot;lawEnforcementId&quot; : &quot;Ad4ATcY00E&quot;,&#xd;
 &quot;zipSuffixNumber&quot; : 0,&#xd;
 &quot;countySpecificCode&quot; : &quot;36&quot;&#xd;
},&#xd;
  &quot;client&quot;: [&#xd;
    {&#xd;
  &quot;adjudicatedDelinquentIndicator&quot;: false,&#xd;
  &quot;adoptionStatusCode&quot;: &quot;N&quot;,&#xd;
  &quot;alienRegistrationNumber&quot;: &quot;          &quot;,&#xd;
  &quot;birthCity&quot;: &quot; &quot;,&#xd;
  &quot;birthCountryCodeType&quot;: 0,&#xd;
  &quot;birthDate&quot;: &quot;1977-09-01&quot;,&#xd;
  &quot;birthFacilityName&quot;: &quot; &quot;,&#xd;
  &quot;birthStateCodeType&quot;: 0,&#xd;
  &quot;birthplaceVerifiedIndicator&quot;: false,&#xd;
  &quot;childClientIndicatorVar&quot;: false,&#xd;
  &quot;clientIndexNumber&quot;: null,&#xd;
  &quot;commentDescription&quot;: &quot;                                                                                                                      &quot;,&#xd;
  &quot;commonFirstName&quot;: &quot;joey               &quot;,&#xd;
  &quot;commonLastName&quot;: &quot;Conen                    &quot;,&#xd;
  &quot;commonMiddleName&quot;: &quot;r                  &quot;,&#xd;
  &quot;confidentialityActionDate&quot;: null,&#xd;
  &quot;confidentialityInEffectIndicator&quot;: false,&#xd;
  &quot;creationDate&quot;: &quot;2016-09-30&quot;,&#xd;
  &quot;currCaChildrenServIndicator&quot;: false,&#xd;
  &quot;currentlyOtherDescription&quot;: &quot;                       &quot;,&#xd;
  &quot;currentlyRegionalCenterIndicator&quot;: false,&#xd;
  &quot;deathDate&quot;: null,&#xd;
  &quot;deathDateVerifiedIndicator&quot;: false,&#xd;
  &quot;deathPlace&quot;: null,&#xd;
  &quot;deathReasonText&quot;: null,&#xd;
  &quot;driverLicenseNumber&quot;: &quot;N333000444         &quot;,&#xd;
  &quot;driverLicenseStateCodeType&quot;: 1828,&#xd;
  &quot;emailAddress&quot;: null,&#xd;
  &quot;estimatedDobCode&quot;: &quot;N&quot;,&#xd;
  &quot;ethUnableToDetReasonCode&quot;: null,&#xd;
  &quot;fatherParentalRightTermDate&quot;: null,&#xd;
  &quot;genderCode&quot;: &quot;M&quot;,&#xd;
  &quot;healthSummaryText&quot;: null,&#xd;
  &quot;hispUnableToDetReasonCode&quot;: &quot;K&quot;,&#xd;
  &quot;hispanicOriginCode&quot;: &quot;Z&quot;,&#xd;
  &quot;immigrationCountryCodeType&quot;: 0,&#xd;
  &quot;immigrationStatusType&quot;: 0,&#xd;
  &quot;incapacitatedParentCode&quot;: &quot;U&quot;,&#xd;
  &quot;individualHealthCarePlanIndicator&quot;: false,&#xd;
  &quot;limitationOnScpHealthIndicator&quot;: false,&#xd;
  &quot;literateCode&quot;: &quot;Y&quot;,&#xd;
  &quot;maritalCohabitatnHstryIndicatorVar&quot;: false,&#xd;
  &quot;maritalStatusType&quot;: 0,&#xd;
  &quot;militaryStatusCode&quot;: &quot;D&quot;,&#xd;
  &quot;motherParentalRightTermDate&quot;: null,&#xd;
  &quot;namePrefixDescription&quot;: &quot;      &quot;,&#xd;
  &quot;nameType&quot;: 1313,&#xd;
  &quot;outstandingWarrantIndicator&quot;: false,&#xd;
  &quot;prevCaChildrenServIndicator&quot;: false,&#xd;
  &quot;prevOtherDescription&quot;: &quot; &quot;,&#xd;
  &quot;prevRegionalCenterIndicator&quot;: false,&#xd;
  &quot;primaryEthnicityType&quot;: 6352,&#xd;
  &quot;primaryLanguage&quot;: 1253,&#xd;
  &quot;religionType&quot;: 0,&#xd;
  &quot;secondaryLanguage&quot;: 0,&#xd;
  &quot;sensitiveHlthInfoOnFileIndicator&quot;: false,&#xd;
  &quot;sensitivityIndicator&quot;: &quot;N&quot;,&#xd;
  &quot;soc158PlacementCode&quot;: &quot;N&quot;,&#xd;
  &quot;soc158SealedClientIndicator&quot;: false,&#xd;
  &quot;socialSecurityNumChangedCode&quot;: &quot;N&quot;,&#xd;
  &quot;socialSecurityNumber&quot;: &quot;&quot;,&#xd;
  &quot;suffixTitleDescription&quot;: &quot; &quot;,&#xd;
  &quot;tribalAncestryClientIndicatorVar&quot;: false,&#xd;
  &quot;tribalMembrshpVerifctnIndicatorVar&quot;: false,&#xd;
  &quot;unemployedParentCode&quot;: &quot;U&quot;,&#xd;
  &quot;zippyCreatedIndicator&quot;: false&#xd;
}&#xd;
]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(api.host)}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(api.protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/_cmsreferrals?token=${__property(token)}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract from json referralId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">referralId; allegationId; crossReportThirdId; clientId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">referral.id; allegation.id; $..crossReport[0].thirdId; $..client[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">referralId; allegationId; thirdId; clientId</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">log.info(&quot;POST cmsreferral to match baseline values &quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">log.info(&quot;id of Posted Referral &quot; +&quot;${referralId}&quot;);
Boolean success = !(&quot;${referralId}&quot;.equals(&quot;referralId&quot;));
if(!success){
	prev.setSuccessful(false);
     String errormsg = &quot;the POST of cmsreferral failed&quot;;
     prev.setResponseMessage(errormsg);
     log.error(errormsg);
     prev.setStopTestNow(true);
}
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="NS Controller" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="NS (Docker DB2) Configuration" enabled="true">
            <stringProp name="dataSource">docker</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">values 1</stringProp>
            <stringProp name="dbUrl">${__P(ns.db2.url)}</stringProp>
            <stringProp name="driver">com.ibm.db2.jcc.DB2Driver</stringProp>
            <stringProp name="username">${__P(ns.db2.username)}</stringProp>
            <stringProp name="password">${__P(ns.db2.password)}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="NS Referral JDBC Request" enabled="true">
            <stringProp name="dataSource">docker</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select * from CWSINT.REFERL_T where IDENTIFIER = &apos;${referralId}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">IDENTIFIER</stringProp>
            <stringProp name="resultVariable">nsReferral</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="NS Allegation JDBC Request" enabled="true">
            <stringProp name="dataSource">docker</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select * from CWSINT.ALLGTN_T where FKREFERL_T = &apos;${referralId}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">IDENTIFIER</stringProp>
            <stringProp name="resultVariable">nsAllegation</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="NS CrossReport JDBC Request" enabled="true">
            <stringProp name="dataSource">docker</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select * from CWSINT.CRSS_RPT where THIRD_ID = &apos;${crossReportThirdId}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">IDENTIFIER</stringProp>
            <stringProp name="resultVariable">nsCrossReport</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="NS ReferralClient JDBC Request" enabled="true">
            <stringProp name="dataSource">docker</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select * from CWSINT.REFR_CLT where FKREFERL_T = &apos;${referralId}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">IDENTIFIER</stringProp>
            <stringProp name="resultVariable">nsReferralClient</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="NS Reporter JDBC Request" enabled="true">
            <stringProp name="dataSource">docker</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select * from CWSINT.REPTR_T where FKREFERL_T = &apos;${referralId}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">IDENTIFIER</stringProp>
            <stringProp name="resultVariable">nsReporter</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="NS Client JDBC Request" enabled="true">
            <stringProp name="dataSource">docker</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select * from CWSINT.CLIENT_T where IDENTIFIER = &apos;${clientId}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">IDENTIFIER</stringProp>
            <stringProp name="resultVariable">nsClient</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="ResultCollector.success_only_logging">true</boolProp>
        </ResultCollector>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Legacy Controller" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Legacy (Taborda DB2) Configuration" enabled="true">
            <stringProp name="dataSource">taborda</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">values 1</stringProp>
            <stringProp name="dbUrl">${__P(legacy.db2.url)}</stringProp>
            <stringProp name="driver">com.ibm.db2.jcc.DB2Driver</stringProp>
            <stringProp name="username">${__P(legacy.db2.username)}</stringProp>
            <stringProp name="password">${__P(legacy.db2.password)}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Legacy Referral JDBC Request" enabled="true">
            <stringProp name="dataSource">taborda</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select * from CWSINT.REFERL_T where IDENTIFIER = &apos;${__P(legacy.baseline.referral.id)}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">IDENTIFIER</stringProp>
            <stringProp name="resultVariable">legacyReferral</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters">ADD_INF_CD ZIPPY_IND XRPT_LWIND UNFD_SR_CD SPRJRF_IND SP_INCL_CD SFC_INF_CD SCN_NT_TXT RSP_RTNTXT RSP_AGY_CD REFERRL_NM PETAPL_IND LST_UPD_ID LMT_ACSSCD LMT_ACSDSC LGLRGT_IND LGL_DEF_CD INVSTG_DOC IDENTIFIER HOMLES_IND FMY_AW_IND FKSTFPERST FKSTFPERS0 FKREFERL_T FKADDRS_T FAMREF_IND ER_REF_DOC CR_PERP_CD CNTY_SPFCD CHILOC_TXT APRVL_NO ANRPTR_IND ALGDSC_DOC ADQT_CS_CD FIRST_EODT XRPT_RCVDT RSP_DTR_DT REFCLSR_DT REF_RCV_DT ORIGCLS_DT LMT_ACS_DT APV_STC RFRD_RSC RFR_RSPC L_GVR_ENTC GVR_ENTC CMM_MTHC REF_RCV_TM RSP_DTR_TM LST_UPD_TS</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">if(vars.getObject(&quot;nsReferral&quot;).size()==0){
	prev.setSuccessful(false);
     String errormsg = &quot;the nsReferral is empty&quot;;
     prev.setResponseMessage(errormsg);
     log.error(errormsg);
     prev.setStopTestNow(true);
}
if(vars.getObject(&quot;legacyReferral&quot;).size()==0){
	prev.setSuccessful(false);
     String errormsg = &quot;the legacyReferral is empty&quot;;
     prev.setResponseMessage(errormsg);
     log.error(errormsg);
     prev.setStopTestNow(true);
}
HashMap nsReferral = vars.getObject(&quot;nsReferral&quot;).get(0);
HashMap legacyReferral = vars.getObject(&quot;legacyReferral&quot;).get(0);

boolean success = true;
for(String arg: bsh.args){
    Object nsValue = nsReferral.get(arg);
    Object legacyValue = legacyReferral.get(arg);
    Boolean isNotMatching = !(nsValue!=null &amp;&amp; legacyValue!=null &amp;&amp; nsValue.equals(legacyValue) ) &amp;&amp; !(nsValue == null &amp;&amp; legacyValue == null);

    if( !arg.equals(&quot;IDENTIFIER&quot;) &amp;&amp; !arg.equals(&quot;REF_RCV_TM&quot;) &amp;&amp; !arg.equals(&quot;LST_UPD_TS&quot;) &amp;&amp; !arg.equals(&quot;LST_UPD_ID&quot;)){
      if (isNotMatching) {
    	   success = false;
    	   log.info(&quot;not matching &quot;+arg + &quot; = &quot;+nsValue+ &quot; &quot;+legacyValue);
      }	
  }
}
if(success){
	log.info(&quot;REFERRAL comparison between CMS and NS was successful &quot;);
} else {
	String errormsg = &quot;the CMS and NS referrals do not match&quot;;
	Failure = !success;
	FailureMessage = errormsg;
	prev.setSuccessful(false);
     prev.setResponseMessage(errormsg);
     log.error(errormsg);
     prev.setStopTestNow(true);
}

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Legacy Allegation JDBC Request" enabled="true">
            <stringProp name="dataSource">taborda</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select * from CWSINT.ALLGTN_T where FKREFERL_T = &apos;${__P(legacy.baseline.referral.id)}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">IDENTIFIER</stringProp>
            <stringProp name="resultVariable">legacyAllegation</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters">ABUSE_PDCD ZIPPY_IND STFADD_IND NON_PRT_CD LST_UPD_ID LOC_DSC IJHM_DET_B IDENTIFIER FKREFERL_T FKCLIENT_T FKCLIENT_0 DISPSN_DSC CNTY_SPFCD ABUSE_ENDT DISPSN_DT ABUSE_STDT ABUSE_FREQ PLC_FCLC ALG_TPC ALG_DSPC LST_UPD_TS</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">if(vars.getObject(&quot;nsAllegation&quot;).size()==0){
	prev.setSuccessful(false);
     String errormsg = &quot;the nsAllegation is empty&quot;;
     prev.setResponseMessage(errormsg);
     log.error(errormsg);
     prev.setStopTestNow(true);
}
if(vars.getObject(&quot;legacyAllegation&quot;).size()==0){
	prev.setSuccessful(false);
     String errormsg = &quot;the legacyAllegation is empty&quot;;
     prev.setResponseMessage(errormsg);
     log.error(errormsg);
     prev.setStopTestNow(true);
}
HashMap nsAllegation = vars.getObject(&quot;nsAllegation&quot;).get(0);
HashMap legacyAllegation = vars.getObject(&quot;legacyAllegation&quot;).get(0);

boolean success = true;
for(String arg: bsh.args){
    Object nsValue = nsAllegation.get(arg);
    Object legacyValue = legacyAllegation.get(arg);
    Boolean isNotMatching = !(nsValue!=null &amp;&amp; legacyValue!=null &amp;&amp; nsValue.equals(legacyValue) ) &amp;&amp; !(nsValue == null &amp;&amp; legacyValue == null);

    if( !arg.equals(&quot;FKREFERL_T&quot;) &amp;&amp; !arg.equals(&quot;IDENTIFIER&quot;) &amp;&amp; !arg.equals(&quot;LST_UPD_TS&quot;) &amp;&amp; !arg.equals(&quot;LST_UPD_ID&quot;)){
      if (isNotMatching) {
    	   success = false;
    	   log.info(&quot;not matching &quot;+arg + &quot; = &quot;+nsValue+ &quot; &quot;+legacyValue);
      }	
  }
}
if(success){
	log.info(&quot;ALLEGATION comparison between CMS and NS was successful &quot;);
} else {
	String errormsg = &quot;the CMS and NS ALLEGATION do not match&quot;;
	Failure = !success;
	FailureMessage = errormsg;
	prev.setSuccessful(false);
     prev.setResponseMessage(errormsg);
     log.error(errormsg);
     prev.setStopTestNow(true);
}


</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Legacy CrossReport JDBC Request" enabled="true">
            <stringProp name="dataSource">taborda</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select * from CWSINT.CRSS_RPT where THIRD_ID = &apos;${__P(legacy.baseline.$..crossReport[0].thirdId)}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">IDENTIFIER</stringProp>
            <stringProp name="resultVariable">legacyCrossReport</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters">CNTY_SPFCD RECIPNT_NM XRPT_DSC THIRD_ID SXRPT_IND REFERNC_NO RCPT_BDGNO POS_TILDSC OUT_ST_IND OSLWNFADDR OS_LAW_IND LST_UPD_ID LAW_IND GV_XRPT_B FKSTFPERST FKREFERL_T FKLAW_ENFT INFORM_DT RCPT_TELNO RCPT_EXTNO XRPT_MTC INFORM_TM LST_UPD_TS</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">if(vars.getObject(&quot;nsCrossReport&quot;).size()==0){
	prev.setSuccessful(false);
     String errormsg = &quot;the nsCrossReport is empty&quot;;
     prev.setResponseMessage(errormsg);
     log.error(errormsg);
     prev.setStopTestNow(true);
}
if(vars.getObject(&quot;legacyCrossReport&quot;).size()==0){
	prev.setSuccessful(false);
     String errormsg = &quot;the legacyCrossReport is empty&quot;;
     prev.setResponseMessage(errormsg);
     log.error(errormsg);
     prev.setStopTestNow(true);
}

HashMap nsCrossReport = vars.getObject(&quot;nsCrossReport&quot;).get(0);
HashMap legacyCrossReport = vars.getObject(&quot;legacyCrossReport&quot;).get(0);

boolean success = true;
for(String arg: bsh.args){
    Object nsValue = nsCrossReport.get(arg);
    Object legacyValue = legacyCrossReport.get(arg);
    Boolean isNotMatching = !(nsValue!=null &amp;&amp; legacyValue!=null &amp;&amp; nsValue.equals(legacyValue) ) &amp;&amp; !(nsValue == null &amp;&amp; legacyValue == null);

    if( !arg.equals(&quot;FKREFERL_T&quot;) &amp;&amp;!arg.equals(&quot;THIRD_ID&quot;) &amp;&amp; !arg.equals(&quot;INFORM_TM&quot;) &amp;&amp; !arg.equals(&quot;LST_UPD_TS&quot;) &amp;&amp; !arg.equals(&quot;LST_UPD_ID&quot;)){
      if (isNotMatching) {
    	   success = false;
    	   log.info(&quot;not matching &quot;+arg + &quot; = &quot;+nsValue+ &quot; &quot;+legacyValue);
      }	
  }
}

if(success){
	log.info(&quot;CROSS REPORT comparison between CMS and NS was successful &quot;);
} else {
	String errormsg = &quot;the CMS and NS CROSS REPORT do not match&quot;;
	Failure = !success;
	FailureMessage = errormsg;
	prev.setSuccessful(false);
     prev.setResponseMessage(errormsg);
     log.error(errormsg);
     prev.setStopTestNow(true);
}

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Legacy ReferralClient JDBC Request" enabled="true">
            <stringProp name="dataSource">taborda</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select * from CWSINT.REFR_CLT where FKREFERL_T =  &apos;${__P(legacy.baseline.referral.id)}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">IDENTIFIER</stringProp>
            <stringProp name="resultVariable">legacyReferralClient</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters">AGE_PRD_CD STFADD_IND SLFRPT_IND MHLTH_IND LST_UPD_ID FKREFERL_T FKCLIENT_T DSP_CLSDSC DRUG_IND DISPSTN_CD CNTY_SPFCD APRVL_NO ALCHL_IND RCL_DISPDT APV_STC RFCL_AGENO DSP_RSNC LST_UPD_TS</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">if(vars.getObject(&quot;nsReferralClient&quot;).size()==0){
	prev.setSuccessful(false);
     String errormsg = &quot;the nsReferralClient is empty&quot;;
     prev.setResponseMessage(errormsg);
     log.error(errormsg);
     prev.setStopTestNow(true);
}
if(vars.getObject(&quot;legacyReferralClient&quot;).size()==0){
	prev.setSuccessful(false);
     String errormsg = &quot;the legacyReferralClient is empty&quot;;
     prev.setResponseMessage(errormsg);
     log.error(errormsg);
     prev.setStopTestNow(true);
}
HashMap nsReferralClient = vars.getObject(&quot;nsReferralClient&quot;).get(0);
HashMap legacyReferralClient = vars.getObject(&quot;legacyReferralClient&quot;).get(0);

boolean success = true;
for(String arg: bsh.args){
    Object nsValue = nsReferralClient.get(arg);
    Object legacyValue = legacyReferralClient.get(arg);
    Boolean isNotMatching = !(nsValue!=null &amp;&amp; legacyValue!=null &amp;&amp; nsValue.equals(legacyValue) ) &amp;&amp; !(nsValue == null &amp;&amp; legacyValue == null);

    if( !arg.equals(&quot;FKREFERL_T&quot;) &amp;&amp; !arg.equals(&quot;LST_UPD_TS&quot;) &amp;&amp; !arg.equals(&quot;LST_UPD_ID&quot;) &amp;&amp; !arg.equals(&quot;FKCLIENT_T&quot;) ){
      if (isNotMatching) {
    	   success = false;
    	   log.info(&quot;not matching &quot;+arg + &quot; = &quot;+nsValue+ &quot; &quot;+legacyValue);
      }	
  }
}
if(success){
	log.info(&quot;REFERRAL CLIENT comparison between CMS and NS was successful &quot;);
} else {
	String errormsg = &quot;the CMS and NS REFERRAL CLIENT do not match&quot;;
	Failure = !success;
	FailureMessage = errormsg;
	prev.setSuccessful(false);
     prev.setResponseMessage(errormsg);
     log.error(errormsg);
     prev.setStopTestNow(true);
}

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Legacy Reporter JDBC Request" enabled="true">
            <stringProp name="dataSource">taborda</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select * from CWSINT.REPTR_T where FKREFERL_T = &apos;${__P(legacy.baseline.referral.id)}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">IDENTIFIER</stringProp>
            <stringProp name="resultVariable">legacyReporter</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters">CNFWVR_IND SUFX_TLDSC RPTR_BDGNO RPTR_ST_NO RPTR_ST_NM RPTR_LSTNM RPTR_FSTNM RPTR_EMPNM RPTR_CTYNM NMPRFX_DSC MNRPTR_IND MID_INI_NM LST_UPD_ID FKREFERL_T FKLAW_ENFT FDBACK_DOC FB_RQR_IND CNTY_SPFCD FEEDBCK_DT MSG_TEL_NO PRM_TEL_NO MSG_EXT_NO RPTR_ZIPNO PRM_EXT_NO CMM_MTHC STATE_C ZIP_SFX_NO COL_RELC LST_UPD_TS</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">if(vars.getObject(&quot;nsReporter&quot;).size()==0){
	prev.setSuccessful(false);
     String errormsg = &quot;the nsReporter is empty&quot;;
     prev.setResponseMessage(errormsg);
     log.error(errormsg);
     prev.setStopTestNow(true);
}
if(vars.getObject(&quot;legacyReporter&quot;).size()==0){
	prev.setSuccessful(false);
     String errormsg = &quot;the legacyReporter is empty&quot;;
     prev.setResponseMessage(errormsg);
     log.error(errormsg);
     prev.setStopTestNow(true);
}
HashMap nsReporter = vars.getObject(&quot;nsReporter&quot;).get(0);
HashMap legacyReporter = vars.getObject(&quot;legacyReporter&quot;).get(0);

boolean success = true;
for(String arg: bsh.args){
    Object nsValue = nsReporter.get(arg);
    Object legacyValue = legacyReporter.get(arg);
    Boolean isNotMatching = !(nsValue!=null &amp;&amp; legacyValue!=null &amp;&amp; nsValue.equals(legacyValue) ) &amp;&amp; !(nsValue == null &amp;&amp; legacyValue == null);

    if( !arg.equals(&quot;FKREFERL_T&quot;) &amp;&amp; !arg.equals(&quot;LST_UPD_TS&quot;) &amp;&amp; !arg.equals(&quot;LST_UPD_ID&quot;)){
      if (isNotMatching) {
    	   success = false;
    	   log.info(&quot;not matching &quot;+arg + &quot; = &quot;+nsValue+ &quot; &quot;+legacyValue);
      }	
  }
}
if(success){
	log.info(&quot;REPORTER comparison between CMS and NS was successful &quot;);
} else {
	String errormsg = &quot;the CMS and NS REPORTER do not match&quot;;
	Failure = !success;
	FailureMessage = errormsg;
	prev.setSuccessful(false);
     prev.setResponseMessage(errormsg);
     log.error(errormsg);
     prev.setStopTestNow(true);
}
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Legacy Client JDBC Request" enabled="true">
            <stringProp name="dataSource">taborda</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select * from CWSINT.CLIENT_T where IDENTIFIER = &apos;${__P(legacy.baseline.$..client[0].id)}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">IDENTIFIER</stringProp>
            <stringProp name="resultVariable">legacyClient</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters">IDENTIFIER ADPTN_STCD ALN_REG_NO BIRTH_DT BR_FAC_NM B_STATE_C B_CNTRY_C CHLD_CLT_B COM_FST_NM COM_LST_NM COM_MID_NM CONF_EFIND CONF_ACTDT CREATN_DT DEATH_DT DTH_RN_TXT DRV_LIC_NO D_STATE_C GENDER_CD I_CNTRY_C IMGT_STC INCAPC_CD LITRATE_CD MAR_HIST_B MRTL_STC MILT_STACD NMPRFX_DSC NAME_TPC OUTWRT_IND P_ETHNCTYC P_LANG_TPC RLGN_TPC S_LANG_TC SENSTV_IND SNTV_HLIND SS_NO SSN_CHG_CD SUFX_TLDSC UNEMPLY_CD LST_UPD_ID LST_UPD_TS COMMNT_DSC EST_DOB_CD BP_VER_IND HISP_CD CURRCA_IND CURREG_IND COTH_DESC PREVCA_IND PREREG_IND POTH_DESC HCARE_IND LIMIT_IND BIRTH_CITY HEALTH_TXT MTERM_DT FTERM_DT ZIPPY_IND DEATH_PLC TR_MBVRT_B TRBA_CLT_B SOC158_IND DTH_DT_IND EMAIL_ADDR ADJDEL_IND ETH_UD_CD HISP_UD_CD SOCPLC_CD CL_INDX_NO</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">if(vars.getObject(&quot;nsClient&quot;).size()==0){
	prev.setSuccessful(false);
     String errormsg = &quot;the nsClient is empty&quot;;
     prev.setResponseMessage(errormsg);
     log.error(errormsg);
     prev.setStopTestNow(true);
}
if(vars.getObject(&quot;legacyClient&quot;).size()==0){
	prev.setSuccessful(false);
     String errormsg = &quot;the legacyClient is empty&quot;;
     prev.setResponseMessage(errormsg);
     log.error(errormsg);
     prev.setStopTestNow(true);
}
HashMap nsClient = vars.getObject(&quot;nsClient&quot;).get(0);
HashMap legacyClient = vars.getObject(&quot;legacyClient&quot;).get(0);

boolean success = true;
for(String arg: bsh.args){
    Object nsValue = nsClient.get(arg);
    Object legacyValue = legacyClient.get(arg);
    Boolean isNotMatching = !(nsValue!=null &amp;&amp; legacyValue!=null &amp;&amp; nsValue.equals(legacyValue) ) &amp;&amp; !(nsValue == null &amp;&amp; legacyValue == null);

    if( !arg.equals(&quot;IDENTIFIER&quot;) &amp;&amp; !arg.equals(&quot;LST_UPD_TS&quot;) &amp;&amp; !arg.equals(&quot;LST_UPD_ID&quot;)){
      if (isNotMatching) {
    	   success = false;
    	   log.info(&quot;not matching &quot;+arg + &quot; = &quot;+nsValue+ &quot; &quot;+legacyValue);
      }	
  }
}
if(success){
	log.info(&quot;CLIENT comparison between CMS and NS was successful &quot;);
} else {
	String errormsg = &quot;the CMS and NS clients do not match&quot;;
	Failure = !success;
	FailureMessage = errormsg;
	prev.setSuccessful(false);
     prev.setResponseMessage(errormsg);
     log.error(errormsg);
     prev.setStopTestNow(true);
}

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
